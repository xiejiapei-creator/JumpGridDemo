{"version":3,"sources":["file:///Users/xiejiapei/Documents/3D%20Game/Jump/assets/Scipts/GameManager.ts"],"names":["_decorator","Component","Prefab","instantiate","Node","Vec3","Label","PlayerController","ccclass","property","BlockType","GameState","GameManager","type","_road","start","curState","GS_INIT","playerCtrl","node","on","onPlayerJumpEnd","init","startMenu","active","generateRoad","setInputActive","setPosition","ZERO","reset","removeAllChildren","push","BT_STONE","i","roadLength","BT_NONE","Math","floor","random","j","length","block","spawnBlockByType","addChild","cubePrfb","value","GS_PLAYING","stepsLabel","string","setTimeout","GS_END","onStartButtonClicked","moveIndex","checkResult"],"mappings":"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","sourcesContent":["import { _decorator, Component, Prefab, instantiate, Node, CCInteger, Vec3, Label } from 'cc';\nimport { PlayerController } from './PlayerController';\nconst { ccclass, property } = _decorator;\n\n// 赛道格子类型，坑（BT_NONE）或者实路（BT_STONE）\nenum BlockType {\n    BT_NONE,\n    BT_STONE,\n};\n\n// 游戏状态\nenum GameState{\n    GS_INIT,\n    GS_PLAYING,\n    GS_END,\n};\n\n@ccclass(\"GameManager\")\nexport class GameManager extends Component {\n\n    // 赛道预制\n    @property({type: Prefab})\n    public cubePrfb: Prefab | null = null;\n\n    // 赛道长度\n    @property\n    public roadLength = 50;\n\n    // 玩家控制器\n    @property({type: PlayerController})\n    public playerCtrl: PlayerController | null = null;\n\n    // 动态开启/关闭开始菜单\n    @property({type: Node})\n    public startMenu: Node | null = null;\n\n    // 步数显示\n    @property({type: Label})\n    public stepsLabel: Label | null = null;\n\n    // 赛道\n    private _road: BlockType[] = [];\n\n    start () {\n        this.curState = GameState.GS_INIT;\n\n        // ?. 可选链写法\n        // 监听角色跳跃消息，并调用判断函数\n        this.playerCtrl?.node.on('JumpEnd', this.onPlayerJumpEnd, this);\n    }\n\n    // 初始化方法\n    init() {\n        // 激活主界面\n        if (this.startMenu) {\n            this.startMenu.active = true;\n        }\n\n        // 生成赛道\n        this.generateRoad();\n\n        // 控制玩家\n        if(this.playerCtrl){\n            // 禁止接收用户操作人物移动指令\n            this.playerCtrl.setInputActive(false);\n            // 重置人物位置\n            this.playerCtrl.node.setPosition(Vec3.ZERO);\n            // 重置已经移动的步长数据\n            this.playerCtrl.reset();\n        }\n    }\n\n    // 生成道路\n    generateRoad() {\n        // 防止游戏重新开始时，赛道还是旧的赛道\n        // 因此，需要移除旧赛道，清除旧赛道数据\n        this.node.removeAllChildren();\n\n        // 创建新的赛道\n        this._road = [];\n        // 确保游戏运行时，人物一定站在实路上\n        this._road.push(BlockType.BT_STONE);\n\n        // 确定好每一格赛道类型\n        for (let i = 1; i < this.roadLength; i++) {\n            // 如果上一格赛道是坑，那么这一格一定不能为坑\n            if (this._road[i-1] === BlockType.BT_NONE) {\n                this._road.push(BlockType.BT_STONE);\n            } else {\n                this._road.push(Math.floor(Math.random() * 2));\n            }\n        }\n\n        // 根据赛道类型生成赛道\n        for (let j = 0; j < this._road.length; j++) {\n            let block = this.spawnBlockByType(this._road[j]);\n            // 判断是否生成了道路，因为 spawnBlockByType 有可能返回坑（值为 null）\n            if (block) {\n                this.node.addChild(block);\n                block.setPosition(j, -1.5, 0);\n            }\n        }\n    }\n\n    // 通过砖块类型生成相应砖块\n    spawnBlockByType(type: BlockType) {\n        if (!this.cubePrfb) {\n            return null;\n        }\n\n        let block: Node | null = null;\n        // 赛道类型为实路才生成\n        switch(type) {\n            case BlockType.BT_STONE:\n                block = instantiate(this.cubePrfb);\n                break;\n        }\n\n        return block;\n    }\n\n    // 切换游戏状态\n    set curState (value: GameState) {\n        switch(value) {\n            case GameState.GS_INIT:\n                this.init();\n                break;\n            case GameState.GS_PLAYING:\n                if (this.startMenu) {\n                    this.startMenu.active = false;\n                }\n\n                // 将步数重置为0\n                if (this.stepsLabel) {\n                    this.stepsLabel.string = \"0\";   \n                }\n\n                // 设置 active 为 true 时会直接开始监听鼠标事件，此时鼠标抬起事件还未派发\n                // 会出现的现象就是，游戏开始的瞬间人物已经开始移动\n                // 因此，这里需要做延迟处理\n                setTimeout(() => {\n                    if (this.playerCtrl) {\n                        this.playerCtrl.setInputActive(true);\n                    }\n                }, 0.1);\n                break;\n            case GameState.GS_END:\n                break;\n        }\n    }\n\n    // 点击按钮后进入游戏的 Playing 状态\n    onStartButtonClicked() {\n        this.curState = GameState.GS_PLAYING;\n    }\n\n    // 监听角色跳跃消息，并调用判断函数\n    onPlayerJumpEnd(moveIndex: number) {\n        // 因为在最后一步可能出现步伐大的跳跃，但是此时无论跳跃是步伐大还是步伐小都不应该多增加分数\n        if (this.stepsLabel) {\n            this.stepsLabel.string = '' + (moveIndex >= this.roadLength ? this.roadLength : moveIndex);\n        }\n\n        this.checkResult(moveIndex);\n    }\n\n    // 跳到空方块或是超过了最大长度值都结束\n    checkResult(moveIndex: number) {\n        if (moveIndex < this.roadLength) {\n            if (this._road[moveIndex] == BlockType.BT_NONE) {// 跳到了坑上\n                this.curState = GameState.GS_INIT;\n            }\n        } else {// 跳过了最大长度\n            this.curState = GameState.GS_INIT;\n        }\n    }\n}"]}